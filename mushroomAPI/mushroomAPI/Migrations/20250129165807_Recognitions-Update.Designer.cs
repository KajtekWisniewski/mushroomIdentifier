// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using mushroomAPI.Data;

#nullable disable

namespace mushroomAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250129165807_Recognitions-Update")]
    partial class RecognitionsUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("mushroomAPI.Entities.Coordinates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<int?>("MushroomId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MushroomId");

                    b.ToTable("Coordinates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Latitude = 51.507399999999997,
                            Longitude = -0.1278,
                            MushroomId = 3
                        },
                        new
                        {
                            Id = 2,
                            Latitude = 48.8566,
                            Longitude = 2.3521999999999998,
                            MushroomId = 3
                        },
                        new
                        {
                            Id = 3,
                            Latitude = 52.520000000000003,
                            Longitude = 13.404999999999999,
                            MushroomId = 2
                        },
                        new
                        {
                            Id = 4,
                            Latitude = 45.421500000000002,
                            Longitude = -75.697199999999995,
                            MushroomId = 2
                        },
                        new
                        {
                            Id = 5,
                            Latitude = 41.902799999999999,
                            Longitude = 12.4964,
                            MushroomId = 1
                        },
                        new
                        {
                            Id = 6,
                            Latitude = 59.913899999999998,
                            Longitude = 10.7522,
                            MushroomId = 1
                        });
                });

            modelBuilder.Entity("mushroomAPI.Entities.ForumPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MushroomId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MushroomId");

                    b.HasIndex("UserId");

                    b.ToTable("ForumPosts");
                });

            modelBuilder.Entity("mushroomAPI.Entities.Mushroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("CommonNames")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Habitat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEdible")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Mushrooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 0,
                            CommonNames = "[\"Meadow Mushroom\",\"Pink Bottom\"]",
                            Description = "Common edible mushroom found in grasslands",
                            Habitat = "Meadows and fields",
                            ImageUrls = "[\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3a/Agaricus_campestris.jpg/1200px-Agaricus_campestris.jpg\",\"https://upload.wikimedia.org/wikipedia/commons/d/d7/Agaricus-campestris-michoacan.jpg\"]",
                            IsEdible = true,
                            LastUpdated = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Field Mushroom",
                            ScientificName = "Agaricus campestris",
                            Season = "Summer-Fall"
                        },
                        new
                        {
                            Id = 2,
                            Category = 1,
                            CommonNames = "[\"Death Cup\",\"Green Death Cap\"]",
                            Description = "One of the most poisonous mushrooms known",
                            Habitat = "Woodland",
                            ImageUrls = "[\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/99/Amanita_phalloides_1.JPG/800px-Amanita_phalloides_1.JPG\",\"https://foodsafety.osu.edu/sites/cfi/files/imgclean/711-body-1692292442-1.jpg\"]",
                            IsEdible = false,
                            LastUpdated = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Death Cap",
                            ScientificName = "Amanita phalloides",
                            Season = "Summer-Fall"
                        },
                        new
                        {
                            Id = 3,
                            Category = 2,
                            CommonNames = "[\"Porcini\",\"King Bolete\"]",
                            Description = "Prized edible mushroom with thick stem",
                            Habitat = "Mixed woodland",
                            ImageUrls = "[\"https://upload.wikimedia.org/wikipedia/commons/3/34/Boletus_edulis_IT.jpg\",\"https://i.ytimg.com/vi/m1yqWtcPFSQ/maxresdefault.jpg\"]",
                            IsEdible = true,
                            LastUpdated = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Penny Bun",
                            ScientificName = "Boletus edulis",
                            Season = "Late Summer-Fall"
                        });
                });

            modelBuilder.Entity("mushroomAPI.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("SavedRecognitions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            IsAdmin = true,
                            PasswordHash = new byte[] { 232, 246, 141, 67, 232, 192, 159, 207, 134, 42, 63, 38, 46, 147, 75, 245, 79, 10, 139, 198, 40, 25, 118, 16, 36, 154, 138, 76, 117, 99, 135, 79, 42, 192, 147, 194, 211, 38, 11, 55, 62, 111, 229, 2, 166, 78, 122, 216, 64, 239, 74, 188, 228, 249, 59, 14, 151, 216, 52, 13, 246, 51, 79, 161 },
                            PasswordSalt = new byte[] { 175, 128, 96, 24, 152, 157, 168, 241, 14, 65, 66, 149, 210, 172, 223, 214, 63, 85, 16, 117, 97, 145, 136, 90, 143, 196, 70, 59, 100, 243, 63, 250, 113, 188, 169, 184, 230, 125, 44, 82, 97, 40, 188, 239, 4, 8, 115, 234, 77, 34, 73, 105, 155, 31, 121, 71, 3, 221, 238, 81, 104, 149, 177, 250, 215, 31, 202, 15, 101, 45, 107, 196, 217, 3, 250, 51, 135, 242, 127, 63, 89, 83, 101, 19, 131, 161, 137, 182, 163, 42, 242, 151, 130, 172, 227, 23, 130, 148, 183, 50, 61, 10, 208, 84, 200, 191, 119, 240, 202, 230, 6, 137, 120, 7, 251, 75, 57, 13, 245, 240, 0, 170, 140, 129, 166, 209, 47, 84 },
                            SavedRecognitions = "[]",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "user@example.com",
                            IsAdmin = false,
                            PasswordHash = new byte[] { 232, 246, 141, 67, 232, 192, 159, 207, 134, 42, 63, 38, 46, 147, 75, 245, 79, 10, 139, 198, 40, 25, 118, 16, 36, 154, 138, 76, 117, 99, 135, 79, 42, 192, 147, 194, 211, 38, 11, 55, 62, 111, 229, 2, 166, 78, 122, 216, 64, 239, 74, 188, 228, 249, 59, 14, 151, 216, 52, 13, 246, 51, 79, 161 },
                            PasswordSalt = new byte[] { 175, 128, 96, 24, 152, 157, 168, 241, 14, 65, 66, 149, 210, 172, 223, 214, 63, 85, 16, 117, 97, 145, 136, 90, 143, 196, 70, 59, 100, 243, 63, 250, 113, 188, 169, 184, 230, 125, 44, 82, 97, 40, 188, 239, 4, 8, 115, 234, 77, 34, 73, 105, 155, 31, 121, 71, 3, 221, 238, 81, 104, 149, 177, 250, 215, 31, 202, 15, 101, 45, 107, 196, 217, 3, 250, 51, 135, 242, 127, 63, 89, 83, 101, 19, 131, 161, 137, 182, 163, 42, 242, 151, 130, 172, 227, 23, 130, 148, 183, 50, 61, 10, 208, 84, 200, 191, 119, 240, 202, 230, 6, 137, 120, 7, 251, 75, 57, 13, 245, 240, 0, 170, 140, 129, 166, 209, 47, 84 },
                            SavedRecognitions = "[]",
                            Username = "user"
                        });
                });

            modelBuilder.Entity("mushroomAPI.Entities.Coordinates", b =>
                {
                    b.HasOne("mushroomAPI.Entities.Mushroom", null)
                        .WithMany("Locations")
                        .HasForeignKey("MushroomId");
                });

            modelBuilder.Entity("mushroomAPI.Entities.ForumPost", b =>
                {
                    b.HasOne("mushroomAPI.Entities.Mushroom", "Mushroom")
                        .WithMany()
                        .HasForeignKey("MushroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mushroomAPI.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mushroom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("mushroomAPI.Entities.Mushroom", b =>
                {
                    b.Navigation("Locations");
                });
#pragma warning restore 612, 618
        }
    }
}
